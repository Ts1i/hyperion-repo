16-004 Designing and Building a Relational Database (Question 1 and 2)

Question 1:

  A database is an organized and structured collection of data, designed for efficient storage, retrieval, 
  and management of information. It provides a systematic way to store and access data electronically.

  To interact with and manage databases effectively, three fundamental types of database languages are employed => 
  Data Definition Language (DDL), Data Manipulation Language (DML), and Query Languages. 
  These languages serve distinct but complementary roles:

  Data Definition Language (DDL):  DDL is used to define and manage the structure of the database itself, 
  often referred to as the database schema. It encompasses commands to create, modify, and delete database objects such as tables, 
  indexes, and users. DDL focuses on describing the data and its relationships, specifying data types, constraints, 
  and the overall organization of the data.

  Data Manipulation Language (DML): DML is used to manipulate and work with the data stored within the database. 
  It provides commands to insert, update, delete, and retrieve data. DML allows users to interact with the data content, 
  enabling them to populate the database, modify existing information, remove outdated records, and extract specific data 
  sets for various purposes.

  Query Languages: Query languages are specialized languages designed for requesting and retrieving specific information from the database. 
  They allow users to ask questions of the data, perform searches, filtering, sorting, and computational operations to extract 
  meaningful insights.  SQL (Structured Query Language) is the most widely adopted query language. 
  Query languages empower users to explore the data, answer complex questions, and generate reports, 
  facilitating data analysis and informed decision-making.

Question 2:

  For the diagram, refer to "16-004 Designing and Building a Relational Database - Question 2" in the task folder.

  1. Primary Keys:
    - INV_NUM and PROD_NUM together form a composite primary key for the table
    - They jointly determine QUANT_SOLD (how many of each product was sold on an invoice)

  2. Functional Dependencies (shown with solid arrows →):
    - INV_NUM → SALE_DATE: Each invoice number determines the sale date
    - PROD_NUM → PROD_LABEL: Each product number determines its label/description
    - PROD_NUM → PROD_PRICE: Each product number determines its price
    - PROD_NUM → VEND_CODE: Each product number determines its vendor code
    - VEND_CODE → VEND_NAME: Each vendor code determines the vendor name

  3. Partial Dependencies (shown with dashed arrows and "PD" label):
    These are problematic because they depend on only part of the primary key:
    - SALE_DATE depends only on INV_NUM (not the full primary key)
    - PROD_LABEL depends only on PROD_NUM
    - PROD_PRICE depends only on PROD_NUM
    - VEND_CODE depends only on PROD_NUM

  4. Transitive Dependencies (shown with dashed arrows and "TD" label):
    These are problematic because they show indirect dependencies:
    - VEND_NAME depends on PROD_NUM through VEND_CODE (PROD_NUM → VEND_CODE → VEND_NAME)
    - VEND_NAME directly depends on VEND_CODE